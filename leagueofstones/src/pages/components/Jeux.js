import Head from "next/head";
import ImageDesc from "./ImageDesc";
import Menu from "./Menu";
import Footer from "./Footer";
import { useEffect, useState } from "react";


export default function Jeux() {
  const [listesChampions, setlistesChampions] = useState([]);
  const [listesChSelectionnes, setlistesChSelectionnes] = useState([]);
  const [complet, setComplet] = useState(false);
  const [valided , setValided] = useState(false);

  useEffect(() => {
    getCards();
  }, []);

  useEffect(() => {

  if (listesChSelectionnes.length >=20) {
    setComplet(true);
  } else {
    setComplet(false);
  }}, [listesChSelectionnes])

  const deplacerChampion = (desc) => {

    const estDansAllChmpions = listesChampions.some(champi => champi.key === desc.key);
    if (estDansAllChmpions) {
      // Vérifier si le nombre de cartes sélectionnées est inférieur à 20
      if (listesChSelectionnes.length < 20) {
        setlistesChSelectionnes([...listesChSelectionnes, desc]);
        setlistesChampions(listesChampions.filter(champi => champi.key !== desc.key));
      } else {
        alert("Le nombre maximum de cartes sélectionnées est de 20.");
      }
    } else {
      
      setlistesChampions([...listesChampions, desc]);
      setlistesChSelectionnes(listesChSelectionnes.filter(champi => champi.key !== desc.key));
    }
  };

  const getCards = () => {
    fetch("http://localhost:3001/cards")
      .then(response => {
        if (!response.ok) {
          throw new Error("HTTP error " + response.status);
        }
        // console.log(`Largeur: ${window.screen.width} px, Hauteur: ${window.screen.height} px`);

        return response.json();
      })
      .then(data => {
        data.forEach(elmt => { elmt.selected = "false"; });
        setlistesChampions(data);
      })
      .catch(error => console.error("Error:", error));
  };
  //fonction pour valider le deck
  const validerDeck = () => {
    console.log(valided);  
    setValided(true);
    console.log(valided);  
  }

  const invaliderDeck = () => {
    console.log(valided);  
    setValided(false);
    console.log(valided);
  }

  return (
    <>
      <Head>
        <title>League of Stones</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Menu />
      <section className={` container-fluid  d-flex flex-column justify-content-center align-items-center bg-dark text-white`}>
        <main className="">
          { !valided && <section className="row d-flex align-items-start">
              <section className={`champions col-6 border-end border-secondary pe-4`}>
                  
                  <h3 className="text-center display-4 mb-4 fw-bold " >Ici les cartes récupérées</h3>

                  <div className={` row`}>
                            { listesChampions.map((card, index) => (   <div key={index} className="carte col-12 col-sm-6 col-lg-4  col-xl-3   rounded-5">    <ImageDesc desc={card} deplacer={deplacerChampion} />   </div>    ))}
                  </div>

              </section>
              
              <section className={`champions col-6 ps-4`}>

                  <h3 className="text-center display-4 mb-4 fw-bold  ">Ici les cartes sélectionnées</h3> {complet ? <button className="valide" onClick={validerDeck}> Je valide mon dèque</button> : null}
                  <div className={` row`}>
                            { listesChSelectionnes.map((card, index) => (   <div key={index} className="carte col-12 col-sm-6 col-lg-4 col-xl-3  rounded-5">    <ImageDesc desc={card} deplacer={deplacerChampion} />    </div>    ))}
                  </div>

              </section>

          </section>}
          {valided && <section className={``}>
          <section className={`champions col-12 ps-4`}>
            <h3 className="text-center display-4 mb-4 fw-bold  ">Ici les cartes validées</h3>
              <div className={` row`}>
                        { listesChSelectionnes.map((card, index) => (   <div key={index} className="carte col-12 col-sm-6 col-lg-4 col-xl-3  rounded-5">    <ImageDesc desc={card} deplacer={() => {}} />    </div>    ))}
              </div>
              <button className="valide" onClick={invaliderDeck}>Retour aux choix du deck</button>
            </section>
          </section>}
        </main>
      </section>
      <Footer />
    </>
  );
}